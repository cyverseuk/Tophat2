{
  "name": "TopHat2_SE",
  "label": "TopHat2 SE",
  "shortDescription": "TopHat2 single end (v2.1.0)",
  "longDescription": "TopHat is a fast splice junction mapper for RNA-Seq reads. It aligns RNA-Seq reads to mammalian-sized genomes using the ultra high-throughput short read aligner Bowtie, and then analyzes the mapping results to identify splice junctions between exons.",
  "helpURI": "http://ccb.jhu.edu/software/tophat/index.shtml",
  "datePublished": "",
  "author":"Alice Minotto",
  "version": "0.0.0",
  "deploymentSystem": "cyverseUK-Storage2",
  "deploymentPath": "/mnt/data/apps/tophat2_se",
  "executionSystem": "cyverseUK-Batch2",
  "executionType": "CLI",
  "parallelism": "SERIAL",
  "templatePath": "wrapper.sh",
  "testPath": "test.sh",
  "ontology": [ "http://edamontology.org/operation_3199",
  "http://edamontology.org/operation_0314",
  "http://edamontology.org/operation_0433",
  "http://edamontology.org/topic_3320",
  "http://edamontology.org/topic_3308",
  "http://edamontology.org/topic_3512" ],
  "tags": [ "CyverseUK" ],
  "inputs": [
    {"id": "bowtie_index",
    "value": {
      "required": true,
      "default": ""
    },
    "details": {
      "label": "Bowtie index",
      "showArgument": false,
      "description": "please provide an archive or all the files composing the index (.fa is optional)"
    },
    "semantics": {
      "maxCardinality": -1
    }},
    {"id": "reads",
    "value": {
      "required": true,
      "default": ""
      },
    "details": { "label": "Reads",
      "showArgument": false
    },
    "semantics": {
      "maxCardinality": -1
      }},
      {"id": "quality_file",
      "value": {
        "required": false,
        "default": ""
        },
      "details": { "label": "Quality file(s)",
        "showArgument": false
      },
      "semantics": {
        "maxCardinality": -1
        }},
        {"id": "GTF",
        "value": {
          "required": false,
          "default": ""
          },
        "details": { "label": "GTF/GFF with known transcripts",
          "description": "Supply TopHat with a set of gene model annotations and/or known transcripts, as a GTF 2.2 or GFF3 formatted file. If this option is provided, TopHat will first extract the transcript sequences and use Bowtie to align reads to this virtual transcriptome first. Only the reads that do not fully map to the transcriptome will then be mapped on the genome. The reads that did map on the transcriptome will be converted to genomic mappings (spliced as needed) and merged with the novel mappings and junctions in the final tophat output.",
          "showArgument": false
        }}
    ],


  "parameters": [
    {"id": "read-mismatches",
    "value": {
      "type": "number",
      "visible": true,
      "validator": "^[0-9]*$",
      "default": 2
      },
    "details": {
      "label": "Read mismatches (2)",
      "description": "Final read alignments having more than these many mismatches are discarded.",
      "showArgument": true,
      "argument": "--read-mismatches "
      }},
    {"id": "read-gap-length",
      "value": {
        "type": "number",
        "visible": true,
        "default": 2,
        "validator": "^[0-9]*$"
      },
      "details": {
        "label": "Read gap length (2)",
        "description": "Final read alignments having more than these many total length of gaps are discarded.",
        "showArgument": true,
        "argument": "--read-gap-length "
      }
    },
    {"id": "read-edit-dist",
      "value": {
        "type": "number",
        "visible": true,
        "default": 2,
        "validator": "^[0-9]*$"
      },
      "details": {
        "label": "Read edit distance (2)",
        "description": "Final read alignments having more than these many edit distance are discarded.",
        "showArgument": true,
        "argument": "--read-edit-dist "
      }
    },
    {"id": "read-realign-edit-dist",
      "value": {
        "type": "string",
        "visible": true,
        "validator": "^[0-9]*$"
      },
      "details": {
        "label": "Read realign edit distance",
        "description": "default read-edit-dist + 1. Some of the reads spanning multiple exons may be mapped incorrectly as a contiguous alignment to the genome even though the correct alignment should be a spliced one - this can happen in the presence of processed pseudogenes that are rarely (if at all) transcribed or expressed. This option can direct TopHat to re-align reads for which the edit distance of an alignment obtained in a previous mapping step is above or equal to this option value. If you set this option to 0, TopHat will map every read in all the mapping steps (transcriptome if you provided gene annotations, genome, and finally splice variants detected by TopHat), reporting the best possible alignment found in any of these mapping steps. This may greatly increase the mapping accuracy at the expense of an increase in running time. The default value for this option is set such that TopHat will not try to realign reads already mapped in earlier steps.",
        "showArgument": true,
        "argument": "--read-realign-edit-dist "
      }
    },
    {"id": "min-anchor",
      "value": {
        "type": "number",
        "visible": true,
        "default": 8,
        "validator": "^([0-9]*)$"
      },
      "details": {
        "label": "Min anchor",
        "description": "The 'anchor length'. TopHat will report junctions spanned by reads with at least this many bases on each side of the junction. Note that individual spliced alignments may span a junction with fewer than this many bases on one side. However, every junction involved in spliced alignments is supported by at least one read with this many bases on each side. This must be at least 3.",
        "showArgument": true,
        "argument": "--min-anchor "
      }
    },
    {"id": "splice-mismatches",
      "value": {
        "type": "number",
        "visible": true,
        "default": 0,
        "validator": "^[0-2]$"
      },
      "details": {
        "label": "Splice mismatches",
        "description": "The maximum number of mismatches that may appear in the 'anchor' region of a spliced alignment.",
        "showArgument": true,
        "argument": "--splice-mismatches "
      }
    },
    {"id": "min-intron-length",
      "value": {
        "type": "number",
        "default": 50,
        "validator": "^[0-9]*$",
        "visible": true
      },
      "details": {
        "label": "Minimum intron length",
        "description": "The minimum intron length. TopHat will ignore donor/acceptor pairs closer than this many bases apart.",
        "showArgument": true,
        "argument": "--min-intron-length "
      }
    },
    {"id": "max-intron-length",
      "value": {
        "type": "number",
        "default": 500000,
        "visible": true,
        "validator": "^[0-9]*$"
      },
      "details": {
        "label": "Maximum intron length",
        "description": "When searching for junctions ab initio, TopHat will ignore donor/acceptor pairs farther than this many bases apart, except when such a pair is supported by a split segment alignment of a long read.",
        "showArgument": true,
        "argument": "--max-intron-length "
      }
    },
    {"id": "max-multihits",
      "value": {
        "type": "number",
        "default": 20,
        "validator": "^[0-9]*$",
        "visible": true
      },
      "details": {
        "label": "Max multihits",
        "description": "Instructs TopHat to allow up to this many alignments to the reference for a given read, and choose the alignments based on their alignment scores if there are more than this number. The default is 20 for read mapping. Unless you use --report-secondary-alignments, TopHat will report the alignments with the best alignment score. If there are more alignments with the same score than this number, TopHat will randomly report only this many alignments. In case of using --report-secondary-alignments, TopHat will try to report alignments up to this option value, and TopHat may randomly output some of the alignments with the same score to meet this number.",
        "showArgument": true,
        "argument": "--max-multihits "
      }
    },
    {"id": "suppress-hits",
      "value": {
        "type": "flag",
        "visible": true
      },
      "details": {
        "label": "Suppress hits",
        "showArgument": true,
        "argument": "--suppress-hits "
      }
    },
    {"id": "transcriptome-max-hits",
      "value": {
        "type": "number",
        "default": 60,
        "visible": true,
        "validator": "^[0-9]*$"
      },
      "details": {
        "label": "Transcriptome max hits",
        "description": "Maximum number of mappings allowed for a read, when aligned to the transcriptome (any reads found with more then this number of mappings will be discarded).",
        "showArgument": true,
        "argument": "--transcriptome-max-hits "
      }
    },
    {"id": "prefilter-multihits",
      "value": {
        "type": "flag",
        "visible": true
      },
      "details": {
        "label": "Prefilter multihits",
        "description": "for -G/--GTF option, enable an initial bowtie search against the genome. When mapping reads on the transcriptome, some repetitive or low complexity reads that would be discarded in the context of the genome may appear to align to the transcript sequences and thus may end up reported as mapped to those genes only. This option directs TopHat to first align the reads to the whole genome in order to determine and exclude such multi-mapped reads (according to the value of the -g/--max-multihits option).",
        "showArgument": true,
        "argument": "--prefilter-multihits "
      }
    },
    {"id": "max-insertion-length",
      "value": {
        "type": "number",
        "default": 3,
        "validator": "^[0-9]*$",
        "visible": true
      },
      "details": {
        "label": "Maximum insertion length",
        "showArgument": true,
        "argument": "--max-insertion-length "
      }
    },
    {"id": "max-deletion-length",
      "value": {
        "type": "number",
        "visible": true,
        "validator": "^[0-9]*$",
        "default": 3
      },
      "details": {
        "label": "Max deletion length",
        "showArgument": true,
        "argument": "--max-deletion-length "
      }
    },
    {"id": "quality_type",
      "value": {
        "type": "enumeration",
        "visible": true,
        "enumValues": [
          {"--solexa-quals ": "Solexa scale"},
          {"--solexa1.3-quals ": "Solexa >= 1.3"},
          {"--phred64-quals ": "Illumina GA pipeline version >=1.3"}
        ]
      },
      "details": {
        "label": "Quality",
        "showArgument": false
      }
    },
    {"id": "integer-quals",
      "value": {
        "type": "flag",
        "visible": true
      },
      "details": {
        "label": "Integer qualities",
        "description": "Quality values are space-delimited integer values, this becomes default when you specify -C/--color.",
        "showArgument": true,
        "argument": "--integer-quals "
      }
    },
    {"id": "color",
      "value": {
        "type": "flag",
        "visible": true
      },
      "details": {
        "label": "Colorspace reads",
        "showArgument": true,
        "argument": "--color "
      }
    },
    {"id": "library-type",
      "value": {
        "type": "enumeration",
        "visible": true,
        "enumValues": [
          "fr-unstranded",
          "fr-firststrand",
          "fr-secondstrand"
        ]
      },
      "details": {
        "label": "Library type",
        "description": "The default is unstranded (fr-unstranded). If either fr-firststrand or fr-secondstrand is specified, every read alignment will have an XS attribute tag as explained below. ",
        "showArgument": true,
        "argument": "--library-type "
      }
    },
    {"id": "transcriptome-only",
      "value": {
        "type": "flag",
        "visible": true
      },
      "details": {
        "label": "Transcriptome only",
        "description": "Only align the reads to the transcriptome and report only those mappings as genomic mappings.",
        "showArgument": true,
        "argument": "--transcriptome-only "
      }
    },
    {"id": "no-novel-juncs",
      "value": {
        "type": "flag",
        "visible": true
      },
      "details": {
        "label": "No novel junctions",
        "description": "Only look for reads across junctions indicated in the supplied GFF or junctions file. (ignored without -G/-j)",
        "showArgument": true,
        "argument": "--no-novel-juncs "
      }
    },
    {"id": "no-novel-indels",
      "value": {
        "type": "flag",
        "visible": true
      },
      "details": {
        "label": "No novel indels",
        "description": "Only look for reads across indels in the supplied indel file, or disable indel detection when no file has been provided.",
        "showArgument": true,
        "argument": "--no-novel-indels "
      }
    },
    {"id": "no-gtf-juncs",
      "value": {
        "type": "flag",
        "visible": true
      },
      "details": {
        "label": "No GTF junctions",
        "showArgument": true,
        "argument": "--no-gtf-juncs "
      }
    },
    {"id": "no-coverage-search",
      "value": {
        "type": "flag",
        "visible": true
      },
      "details": {
        "label": "No coverage search",
        "description": "Disables the coverage based search for junctions.",
        "showArgument": true,
        "argument": "--no-coverage-search "
      }
    },
    {"id": "coverage-search",
      "value": {
        "type": "flag",
        "visible": true
      },
      "details": {
        "label": "Coverage search",
        "description": "Enables the coverage based search for junctions. Use when coverage search is disabled by default (such as for reads 75bp or longer), for maximum sensitivity.",
        "showArgument": true,
        "argument": "--coverage-search "
      }
    },
    {"id": "microexon-search",
      "value": {
        "type": "flag",
        "visible": true
      },
      "details": {
        "label": "Microexon search",
        "description": "With this option, the pipeline will attempt to find alignments incident to micro-exons. Works only for reads 50bp or longer.",
        "showArgument": true,
        "argument": "--microexon-search "
      }
    },
    {"id": "report-secondary-alignments",
      "value": {
        "type": "flag",
        "visible": true
      },
      "details": {
        "label": "Report secondary alignments",
        "description": "By default TopHat reports best or primary alignments based on alignment scores (AS). Use this option if you want to output additional or secondary alignments  (up to 20 alignments will be reported this way, this limit can be changed by using the -g/--max-multihits option above).",
        "showArgument": true,
        "argument": "--report-secondary-alignments "
      }
    },
    {"id": "segment-mismatches",
      "value": {
        "type": "number",
        "visible": true,
        "default": 2,
        "validator": "^[0-9]*$"
      },
      "details": {
        "label": "Segment mismatches",
        "description": "Read segments are mapped independently, allowing up to this many mismatches in each segment alignment.",
        "showArgument": true,
        "argument": "--segment-mismatches "
      }
    },
    {"id": "segment-length",
      "value": {
        "type": "number",
        "visible": true,
        "default": 25,
        "validator": "^[0-9]*$"
      },
      "details": {
        "label": "Segment length",
        "description": "Each read is cut up into segments, each at least this long. These segments are mapped independently.",
        "showArgument": true,
        "argument": "--segment-length "
      }
    },
    {"id": "min-coverage-intron",
      "value": {
        "type": "number",
        "visible": true,
        "default": 50,
        "validator": "^[0-9]*$"
      },
      "details": {
        "label": "Minimum coverage intron",
        "description": "The minimum intron length that may be found during coverage search.",
        "showArgument": true,
        "argument": "--min-coverage-intron "
      }
    },
    {"id": "max-coverage-intron",
      "value": {
        "type": "number",
        "visible": true,
        "validator": "^[0-9]*$",
        "default": 20000
      },
      "details": {
        "label": "Maximum coverage intron",
        "description": "The maximum intron length that may be found during coverage search.",
        "showArgument": true,
        "argument": "--max-coverage-intron "
      }
    },
    {"id": "min-segment-intron",
      "value": {
        "type": "number",
        "visible": true,
        "default": 50,
        "validator": "^[0-9]*$"
      },
      "details": {
        "label": "Minimum segment intron",
        "description": "The minimum intron length that may be found during split-segment search.",
        "showArgument": true,
        "argument": "--min-segment-intron "
      }
    },
    {"id": "max-segment-intron",
      "value": {
        "type": "number",
        "visible": true,
        "default": 500000,
        "validator": "^[0-9]*$"
      },
      "details": {
        "label": "Maximum segment intron",
        "description": "The maximum intron length that may be found during split-segment search.",
        "showArgument": true,
        "argument": "--max-segment-intron "
      }
    },
    {"id": "keep-fasta-order",
      "value": {
        "type": "flag",
        "visible": true
      },
      "details": {
        "label": "Keep FASTA order",
        "description": "In order to sort alignments in the same order in the genome fasta file, the option can be used. But this option will make the output SAM/BAM file incompatible with those from the previous versions of TopHat (1.4.1 or lower).",
        "showArgument": true,
        "argument": "--keep-fasta-order "
      }
    },
    {"id": "bowtie2-preset",
      "value": {
        "type": "enumeration",
        "visible": true,
        "enumValues": [
          {"--b2-very-fast ": "very fast"},
          {"--b2-fast ":"fast"},
          {"--b2-sensitive ":"sensitive"},
          {"--b2-very-sensitive ":"very sensitive"}
        ]
      },
      "details": {
        "label": "Bowtie2 preset",
        "description": "corrisponding to Bowtie2 options",
        "showArgument": false
      }
    },
    {"id": "bowtie2-N",
      "value": {
        "type": "string",
        "visible": true,
        "validator": "^(1|0)$"
      },
      "details": {
        "label": "Bowtie2 N",
        "description": "max # mismatches in seed alignment; can be 0 or 1 (0)",
        "showArgument": true,
        "argument": "--b2-N "
      }
    },
    {"id": "bowtie2-L",
      "value": {
        "type": "string",
        "visible": true,
        "validator": "^([4-9]|[1-2][0-9]|3[0-1])$"
      },
      "details": {
        "label": "Bowtie2 L",
        "description": "length of seed substrings: default 20",
        "showArgument": true,
        "argument": "--b2-L "
      }
    },
    {"id": "bowtie2-i",
      "value": {
        "type": "string",
        "visible": true,
        "validator": "^(L|C|S|G),-?\\d+(.\\d+)?,-?\\d+(.\\d+)?$"
      },
      "details": {
        "label": "Bowtie2 i",
        "description": "Interval between seed substrings w/r/t read len: default S,1,1.25",
        "showArgument": true,
        "argument": "--b2-i "
      }
    },
    {"id": "bowtie2-n-ceil",
      "value": {
        "type": "string",
        "visible": true,
        "validator": "^(L|C|S|G),-?\\d+(.\\d+)?,-?\\d+(.\\d+)?$"
      },
      "details": {
        "label": "Bowtie2 n-ceil",
        "description": "Func for max # non-A/C/G/Ts permitted in aln: default L,0,0.15",
        "showArgument": true,
        "argument": "--b2-n-ceil "
      }
    },
    {"id": "bowtie2-gbar",
      "value": {
        "type": "string",
        "visible": true,
        "validator": "^\\d+$"
      },
      "details": {
        "label": "Bowtie2 gbar",
        "description": "disallow gaps within <int> nucs of read extremes (4)",
        "showArgument": true,
        "argument": "--b2-gbar "
      }
    },
    {"id": "bowtie2-mp",
      "value": {
        "type": "string",
        "visible": true,
        "validator": "^\\d+,\\d+$"
      },
      "details": {
        "label": "Bowtie2 mp",
        "description": "Max mismatch penalty: default 6,2",
        "showArgument": true,
        "argument": "--b2-mp "
      }
    },
    {"id": "bowtie2-np",
      "value": {
        "type": "string",
        "visible": true,
        "validator": "^\\d+$"
      },
      "details": {
        "label": "Bowtie2 np",
        "description": "Penalty for non-A/C/G/T: default 1",
        "showArgument": true,
        "argument": "--b2-np "
      }
    },
    {"id": "bowtie2-rdg",
      "value": {
        "type": "string",
        "visible": true,
        "validator": "^\\d+,\\d+$"
      },
      "details": {
        "label": "Bowtie2 rdg",
        "description": "Read gap open, extend penalties: default 5,3",
        "showArgument": true,
        "argument": "--b2-rdg "
      }
    },
    {"id": "bowtie2-rfg",
      "value": {
        "type": "string",
        "visible": true,
        "validator": "^\\d+,\\d+$"
      },
      "details": {
        "label": "Bowtie2 rfg",
        "description": "Reference gap open, extend penalties: default 5,3",
        "showArgument": true,
        "argument": "--b2-rfg "
      }
    },
    {"id": "bowtie2-score-min",
      "value": {
        "type": "string",
        "visible": true,
        "validator": "^((L|C|S|G),-?\\d+(.\\d+)?,-?\\d+(.\\d+)?)$"
      },
      "details": {
        "label": "Bowtie2 score min",
        "description": "Min accettable alignment score w/r/t read length: default L,-0.6,-0.6",
        "showArgument": true,
        "argument": "--b2-score-min "
      }
    },
    {"id": "bowtie2-D",
      "value": {
        "type": "string",
        "visible": true,
        "validator": "^\\d+$"
      },
      "details": {
        "label": "Bowtie2 D",
        "description": "Give up extending after <int> failed in a row (15)",
        "showArgument": true,
        "argument": "--b2-D "
      }
    },
    {"id": "bowtie2-R",
      "value": {
        "type": "string",
        "visible": true,
        "validator": "^\\d+$"
      },
      "details": {
        "label": "Bowtie2 R",
        "description": "For reads with repetitive seeds try <int> sets of seeds (2)",
        "showArgument": true,
        "argument": "--b2-R "
      }
    },
    {"id": "fusion-search",
      "value": {
        "type": "flag",
        "visible": true
      },
      "details": {
        "label": "Fusion search",
        "description": "Turn on fusion mapping",
        "showArgument": true,
        "argument": "--fusion-search "
      }
    },
    {"id": "fusion-anchor-length",
      "value": {
        "type": "number",
        "visible": true,
        "default": 20,
        "validator": "^[0-9]*$"
      },
      "details": {
        "label": "Fusion anchor length",
        "description": "A 'supporting' read must map to both sides of a fusion by at least these many bases.",
        "showArgument": true,
        "argument": "--fusion-anchor-length "
      }
    },
    {"id": "fusion-min-dist",
      "value": {
        "type": "number",
        "visible": true,
        "default": 10000000,
        "validator": "^[0-9]*$"
      },
      "details": {
        "label": "Fusion minimum distance",
        "description": "For intra-chromosomal fusions, TopHat-Fusion tries to find fusions separated by at least this distance.",
        "showArgument": true,
        "argument": "--fusion-min-dist "
      }
    },
    {"id": "fusion-read-mismatches",
      "value": {
        "type": "number",
        "visible": true,
        "default": 2,
        "validator": "^[0-9]*$"
      },
      "details": {
        "label": "Fusion read mismatches",
        "description": "Reads support fusions if they map across fusion with at most these many mismatches.",
        "showArgument": true,
        "argument": "--fusion-read-mismatches "
      }
    },
    {"id": "fusion-multireads",
      "value": {
        "type": "number",
        "visible": true,
        "default": 2,
        "validator": "^[0-9]*$"
      },
      "details": {
        "label": "Fusion multireads",
        "description": "Reads that map to more than these many places will be ignored. It may be possible that a fusion is supported by reads (or pairs) that map to multiple places.",
        "showArgument": true,
        "argument": "--fusion-multireads "
      }
    },
    {"id": "fusion-ignore-chromosomes",
      "value": {
        "type": "string",
        "visible": true
      },
      "details": {
        "label": "Fusion ignore chromosomes",
        "description": "Ignore some chromosomes such as chrM when detecting fusion break points. Please check the correct names for chromosomes, that is, mitochondrial DNA is represented as chrM or M depending on the annotation you use. (comma separated list)",
        "showArgument": true,
        "argument": "--fusion-ignore-chromosomes "
      }
    },
    {"id": "rg-id",
      "value": {
        "type": "string",
        "visible": true
      },
      "details": {
        "label": "SAM headers: read group ID",
        "showArgument": true,
        "argument": "--rg-id "
      }
    },
    {"id": "rg-sample",
      "value": {
        "type": "string",
        "visible": true
      },
      "details": {
        "label": "SAM headers: sample ID",
        "showArgument": true,
        "argument": "--rg-sample "
      }
    },
    {"id": "rg-library",
      "value": {
        "type": "string",
        "visible": true
      },
      "details": {
        "label": "SAM headers: library ID",
        "showArgument": true,
        "argument": "--rg-library "
      }
    },
    {"id": "rg-description",
      "value": {
        "type": "string",
        "visible": true
      },
      "details": {
        "label": "SAM headers: descriptive string, no tabs allowed",
        "showArgument": true,
        "argument": "--rg-description "
      }
    },
    {"id": "rg-platform-unit",
      "value": {
        "type": "string",
        "visible": true
      },
      "details": {
        "label": "SAM headers: platform unit, e.g. Illumina lane ID",
        "showArgument": true,
        "argument": "--rg-platform-unit "
      }
    },
    {"id": "rg-center",
      "value": {
        "type": "string",
        "visible": true
      },
      "details": {
        "label": "SAM headers: sequencing center name",
        "showArgument": true,
        "argument": "--rg-center "
      }
    },
    {"id": "rg-date",
      "value": {
        "type": "string",
        "visible": true
      },
      "details": {
        "label": "SAM headers: ISO 8601 date of the sequencing run",
        "showArgument": true,
        "argument": "--rg-date "
      }
    },
    {"id": "rg-platform",
      "value": {
        "type": "string",
        "visible": true
      },
      "details": {
        "label": "SAM headers: sequencing platform descriptor",
        "showArgument": true,
        "argument": "--rg-platform "
      }
    }
]
}
